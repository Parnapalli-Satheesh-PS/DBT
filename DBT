DBT
coding
testing
deployment
documentation
data lineage

Cloud

DWH
structured data
Data Lake
structured, semi structured, unstructured data 

SCD
SCD1 overwrite the data, new row added
SCD2 overwrite the data, new colum added
SCD3 new table will be created for historic data

Dataflow process
raw layer - raw_
staging layer - src_
core layer - dim_, fct_

seeds
files that are upload to the DWH from DBT
sources
abstraction layer on the top of your input tables.

AIRBNB.DEV.SCD_RAW_LISTINGS
Database.Schema.Table


Snapshots 
store historical state of rows in a table by recording the data as it changes.
For SCD2 tables snapshots will be implemented.

Tests

models:
  - name: model
    tests:
     - unique:
        columns: [id]

singular
defined in .sql files in your tests directory. The test consists of a SQL query that should return rows only when there is a failure or violation of the test condition.
generic 
1. unique: Ensures all values in a column are unique.
2. not_null: Ensures a column does not contain any NULL values.
3. accepted_values: Ensures a column contains only specific, predefined values.
4. relationships: Ensures that foreign key relationships are valid between tables.

syntax of CTE
WITH CTE AS
(
SELECT * FROM source.listings
)
SELECT
id AS listing_id,
room_type,
created_date
FROM raw_listings;

Macros
jinja templates creates in the macros folder

Test
special macro, can be used for implementing own generic tests.

Hooks
These are SQLs that executed at predefined times
configured on project, subfolder, model level

on_run_start: executed at the start of dbt {run,seed,snapshot}
on_run_end: executed at the end of dbt {run,seed,snapshot}
pre-hook: executed before a model/seed/snapshot is built
post-hook: executed after a model/seed/snapshot is buit


proviee source code of the dim_hosts_cleaned model
models:
- name: dim_hosts_cleansed
  description: cleansed table for the Airbnb hosts
  columns:
   - name: host_id
     description: id of host, This is primary key.
     tests:
      - not_null
      - unique:
         columns: [id]
models:
  - name: host_name
    description: name of host
    tests:
     - not_null:
        columns: [name, age]
models:
  - name: is_superhost
    description: defines whether hosts is a superhost.
    tests:
     - accepted_values:
        column: status
        values:['active','inactive']
models:
  - name: orders
    tests:
     - relationship:
        to: ref('customers')
        field: customer_id

Jinjas
Using jinja turns your dbt into a programming env6for SQL.
Macros
Macros in jinja are pieces of code that can be reused multiple times.
Reusable SQL code snippets that can simplify common operations in DBT models, such as filtering, aggregatting or renaming columns.
defined in .sql files in macros directory.

optimization techniques for DBT models
by using materialized views
optimizing SQL queries by selecting only required columns, creating index, limt funtion
